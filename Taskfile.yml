version: '3'

tasks:
  build:
    desc: Build the Docker image for Kimera XFeat with RealSense support
    cmds:
      - docker build --build-arg BASE_IMAGE=${BASE_IMAGE:-nvcr.io/nvidia/isaac/ros:x86_64-ros2_humble_52e39c39633c15484ec744d5c1921590} -t kimera_xfeat_realsense .
    env:
      BASE_IMAGE: nvcr.io/nvidia/isaac/ros:x86_64-ros2_humble_52e39c39633c15484ec744d5c1921590

  build-jetson:
    desc: Build the Docker image for Jetson (aarch64)
    cmds:
      - docker build --build-arg BASE_IMAGE=${BASE_IMAGE:-nvcr.io/nvidia/isaac/ros:aarch64-ros2_humble_1c5650affa65caa30889ccf92f639896} -t kimera_xfeat_realsense_jetson .
    env:
      BASE_IMAGE: nvcr.io/nvidia/isaac/ros:aarch64-ros2_humble_1c5650affa65caa30889ccf92f639896

  start:
    desc: Start the kimera_xfeat_realsense container in detached mode as v4rl user
    cmds:
      - docker run -d --name kimera_xfeat_realsense --gpus all --network host --privileged -u v4rl -e DISPLAY=$DISPLAY -v /tmp/.X11-unix:/tmp/.X11-unix kimera_xfeat_realsense

  attach:
    desc: Attach to the running kimera_xfeat_realsense container as v4rl user
    cmds:
      - docker exec -it --user v4rl -e DISPLAY=$DISPLAY kimera_xfeat_realsense /bin/bash

  run:
    desc: Run and attach to the built kimera_xfeat_realsense container (one-shot) as v4rl user
    cmds:
      - docker run --rm -it --gpus all --network host --privileged -u v4rl -e DISPLAY=$DISPLAY -v /tmp/.X11-unix:/tmp/.X11-unix kimera_xfeat_realsense

  rm:
    desc: Remove the kimera_xfeat_realsense container if it exists
    cmds:
      - docker rm -f kimera_xfeat_realsense || true
